#!/usr/bin/env python3
# hvformat=true

import argparse
import json
import os
import sys
import urllib.request


# NOTE:
#   This would make more sense as a JavaScript action, but it was useful
#   to use is as a test case for writing custom Python actions.
def main():
    args = parse_args()
    debug = args.debug or os.environ.get('INPUT_DEBUG', 'false') != 'false'
    github_token = args.github_token or os.environ.get('INPUT_GITHUB_TOKEN')

    if debug:
        show_debug_data(github_token)

    if not os.environ.get('CI'):
        title = args.title
    else:
        event_name = os.environ.get('GITHUB_EVENT_NAME')
        if event_name != 'pull_request':
            print(f"exiting: $GITHUB_EVENT_NAME = {repr(event_name)}")
            return
        title = get_pr_title(github_token)

    print("Checking PR title:", repr(title))


# IMPORTANT:
#   The event data file isn't updated when the PR title is edited,
#   so we have to use the REST API to get the title.
def get_pr_title(github_token):
    github_context = parse_github_context()
    url = github_context["pull_request"]["_links"]["self"]["href"]
    print("Getting PR title from:", url)

    headers = {
        "Accept": "application/vnd.github+json",
        "Authorization": f"Bearer {github_token}",
        "X-GitHub-Api-Version": "2022-11-28" ,
    }
    request = urllib.request.Request(
        url, method="GET", headers=headers,
    )
    with urllib.request.urlopen(request) as response:
        body = response.read().decode(
            response.headers.get_content_charset("utf-8"),
        )

    data = json.loads(body)
    return data["title"]


def parse_args():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("--help", action="help")
    parser.add_argument(
        "--debug",
        action="store_true",
    )
    parser.add_argument("--github-token")
    parser.add_argument("--title")
    return parser.parse_args()


def parse_github_context():
    event_path = os.environ.get("GITHUB_EVENT_PATH")
    assert event_path
    with open(event_path, 'rt') as f:
        return json.load(f)


def show_debug_data(github_token):
    print("DEBUG DEBUG DEBUG DEBUG DEBUG")
    print("vvvvvvvvvvvvvvvvvvvvvvvvvvvvv")
    if github_token:
        print(f"GITHUB_TOKEN='{github_token}'")
    print("--")
    keys = sorted(os.environ.keys())
    for k in keys:
        print(f"{k}={repr(os.environ[k])}")
    print("--")
    event_path = os.environ.get("GITHUB_EVENT_PATH")
    if event_path:
        with open(event_path, 'rt') as f:
            print(f.read())
    print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
    print("DEBUG DEBUG DEBUG DEBUG DEBUG")


if __name__ == "__main__":
    main()
